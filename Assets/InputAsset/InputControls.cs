//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAsset/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bd915b6f-2c10-4487-a31b-cada0bf1ad08"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ad078753-4fa6-4213-816e-1653ba86178f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightArmPress"",
                    ""type"": ""Button"",
                    ""id"": ""745258dc-ae4d-4f84-add0-8f5bf97318b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArmPress"",
                    ""type"": ""Button"",
                    ""id"": ""b5b71020-7b96-4081-a1a1-6706369fbeee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightShoulderPress"",
                    ""type"": ""Button"",
                    ""id"": ""bf63c83c-d0fd-43c9-bc8f-f9cb6d65d416"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShoulderPress"",
                    ""type"": ""Button"",
                    ""id"": ""853a8d41-11b8-44fa-8bc0-7ece07daec90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArmLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""d38d9ae3-cca3-4014-bcf7-3aa4b88118c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArmLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""80d0f198-3580-4b94-8591-442715cfc592"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightShoulderLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""789ebaf0-b5b3-40f9-a6bc-ff425514045c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShoulderLongPress"",
                    ""type"": ""Button"",
                    ""id"": ""ee0f4af7-111d-455a-927d-7ec3014bd1e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraReset"",
                    ""type"": ""Button"",
                    ""id"": ""f79cb2b3-4e76-426f-b25b-5c78e60a3cc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""20d6be94-e106-49a1-a190-e02f597ed7d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""838b7b45-b745-4f60-94c4-9a25bb6317a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rise"",
                    ""type"": ""Button"",
                    ""id"": ""f6bfe98d-e04f-412c-9d53-be96a6077a84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""84c274b1-5b13-45dd-8139-574a1515046c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Awake"",
                    ""type"": ""Button"",
                    ""id"": ""6603f65f-4820-427b-8b94-49472c62c88f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""075c41f3-1576-46eb-ac10-df6d2cd7e61f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""568b2625-e83f-4c89-8d20-125466c0268e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8d8bfd46-00b4-4d96-b221-8e943423379d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59590410-4826-4f97-a845-d2da336945a1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""571b82ab-2c63-49f4-a9a9-ac8751befa35"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e34ea1cf-f15a-4c77-983c-978f1714f34f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffc94aa6-9c70-4305-9e35-bbeaa6216b69"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eeb691e-ee77-45e5-9446-8a65b076e840"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc499bbd-97d5-4988-a705-f28acd073f3f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""279af416-5a1e-4a96-920c-6baddc4083f0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a3cbe82-6865-4545-b9bb-5cf32d03d8ec"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84a4ae77-deb0-4f28-962c-023f8a76bf0b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66d06094-ab81-48e9-9501-99519d3f1f18"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulderPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""241d0ef1-f632-436d-a9e1-e5b13a64c29d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulderPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9da30124-2886-4276-aa67-129e5571174c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoulderLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ad4f73c-58c4-4144-b6ef-8f27fa229735"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoulderLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b03dd4cb-9005-430a-a39b-22ea0ecbb4de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f26de4f8-c8ba-4c7c-8de1-cded1ab2515b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmLongPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc100c3-da94-49c0-a440-a2a11121d94a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Awake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mission"",
            ""id"": ""1be94e37-2cb3-4a6a-945e-fb0b4aa466fe"",
            ""actions"": [
                {
                    ""name"": ""BackToBase"",
                    ""type"": ""Button"",
                    ""id"": ""1921ed48-dcbd-41ed-881e-dce83792a1a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""bc5e7785-bdf8-46b2-876d-df894e308c0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47c244a2-729a-49fe-89e9-1d3f6dfc5a6e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackToBase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b37aac72-f959-4746-a57a-8143f4b6bbe4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""b4f3670b-bb3c-4989-ba61-9d9c3bbb05ca"",
            ""actions"": [
                {
                    ""name"": ""UpArrow"",
                    ""type"": ""Button"",
                    ""id"": ""6b2f5828-6577-41fd-996a-30a4c1266afa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownArrow"",
                    ""type"": ""Button"",
                    ""id"": ""de1a1a23-5f25-45fd-b174-34807876e50b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArrow"",
                    ""type"": ""Button"",
                    ""id"": ""393b2762-ffbc-4b61-b3aa-eac1fa78b4a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArrow"",
                    ""type"": ""Button"",
                    ""id"": ""6d17667d-641f-4e5a-879c-51661622db81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""6f32328d-be4f-4eb3-9266-f56cb66a1730"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""619e9531-49ff-4e4f-802c-5348a22a3ed4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenStatus"",
                    ""type"": ""Button"",
                    ""id"": ""d0ee4a16-03e9-4062-8027-000e4b2f7a8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""290f2efc-a30c-4b88-a76c-35106385606b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edd65bd4-4a27-40b3-8d77-89e3aba964a5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ae4d32c-de0f-4cfe-9911-cbf434f626cb"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1c20657-1830-4f9e-8ed5-c15d2b6163c2"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efeb1d18-3b97-484e-8c19-810414b769c2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""186d672b-3807-4bdb-a797-67004f48022e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e55f8d1-1c12-47a7-ad8f-a40cf7e55beb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenStatus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardScheme"",
            ""bindingGroup"": ""KeyBoardScheme"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_RightArmPress = m_Player.FindAction("RightArmPress", throwIfNotFound: true);
        m_Player_LeftArmPress = m_Player.FindAction("LeftArmPress", throwIfNotFound: true);
        m_Player_RightShoulderPress = m_Player.FindAction("RightShoulderPress", throwIfNotFound: true);
        m_Player_LeftShoulderPress = m_Player.FindAction("LeftShoulderPress", throwIfNotFound: true);
        m_Player_RightArmLongPress = m_Player.FindAction("RightArmLongPress", throwIfNotFound: true);
        m_Player_LeftArmLongPress = m_Player.FindAction("LeftArmLongPress", throwIfNotFound: true);
        m_Player_RightShoulderLongPress = m_Player.FindAction("RightShoulderLongPress", throwIfNotFound: true);
        m_Player_LeftShoulderLongPress = m_Player.FindAction("LeftShoulderLongPress", throwIfNotFound: true);
        m_Player_CameraReset = m_Player.FindAction("CameraReset", throwIfNotFound: true);
        m_Player_Boost = m_Player.FindAction("Boost", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Rise = m_Player.FindAction("Rise", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Awake = m_Player.FindAction("Awake", throwIfNotFound: true);
        // Mission
        m_Mission = asset.FindActionMap("Mission", throwIfNotFound: true);
        m_Mission_BackToBase = m_Mission.FindAction("BackToBase", throwIfNotFound: true);
        m_Mission_Menu = m_Mission.FindAction("Menu", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_UpArrow = m_UI.FindAction("UpArrow", throwIfNotFound: true);
        m_UI_DownArrow = m_UI.FindAction("DownArrow", throwIfNotFound: true);
        m_UI_LeftArrow = m_UI.FindAction("LeftArrow", throwIfNotFound: true);
        m_UI_RightArrow = m_UI.FindAction("RightArrow", throwIfNotFound: true);
        m_UI_Confirm = m_UI.FindAction("Confirm", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_OpenStatus = m_UI.FindAction("OpenStatus", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_RightArmPress;
    private readonly InputAction m_Player_LeftArmPress;
    private readonly InputAction m_Player_RightShoulderPress;
    private readonly InputAction m_Player_LeftShoulderPress;
    private readonly InputAction m_Player_RightArmLongPress;
    private readonly InputAction m_Player_LeftArmLongPress;
    private readonly InputAction m_Player_RightShoulderLongPress;
    private readonly InputAction m_Player_LeftShoulderLongPress;
    private readonly InputAction m_Player_CameraReset;
    private readonly InputAction m_Player_Boost;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Rise;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Awake;
    public struct PlayerActions
    {
        private @InputControls m_Wrapper;
        public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @RightArmPress => m_Wrapper.m_Player_RightArmPress;
        public InputAction @LeftArmPress => m_Wrapper.m_Player_LeftArmPress;
        public InputAction @RightShoulderPress => m_Wrapper.m_Player_RightShoulderPress;
        public InputAction @LeftShoulderPress => m_Wrapper.m_Player_LeftShoulderPress;
        public InputAction @RightArmLongPress => m_Wrapper.m_Player_RightArmLongPress;
        public InputAction @LeftArmLongPress => m_Wrapper.m_Player_LeftArmLongPress;
        public InputAction @RightShoulderLongPress => m_Wrapper.m_Player_RightShoulderLongPress;
        public InputAction @LeftShoulderLongPress => m_Wrapper.m_Player_LeftShoulderLongPress;
        public InputAction @CameraReset => m_Wrapper.m_Player_CameraReset;
        public InputAction @Boost => m_Wrapper.m_Player_Boost;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Rise => m_Wrapper.m_Player_Rise;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Awake => m_Wrapper.m_Player_Awake;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @RightArmPress.started += instance.OnRightArmPress;
            @RightArmPress.performed += instance.OnRightArmPress;
            @RightArmPress.canceled += instance.OnRightArmPress;
            @LeftArmPress.started += instance.OnLeftArmPress;
            @LeftArmPress.performed += instance.OnLeftArmPress;
            @LeftArmPress.canceled += instance.OnLeftArmPress;
            @RightShoulderPress.started += instance.OnRightShoulderPress;
            @RightShoulderPress.performed += instance.OnRightShoulderPress;
            @RightShoulderPress.canceled += instance.OnRightShoulderPress;
            @LeftShoulderPress.started += instance.OnLeftShoulderPress;
            @LeftShoulderPress.performed += instance.OnLeftShoulderPress;
            @LeftShoulderPress.canceled += instance.OnLeftShoulderPress;
            @RightArmLongPress.started += instance.OnRightArmLongPress;
            @RightArmLongPress.performed += instance.OnRightArmLongPress;
            @RightArmLongPress.canceled += instance.OnRightArmLongPress;
            @LeftArmLongPress.started += instance.OnLeftArmLongPress;
            @LeftArmLongPress.performed += instance.OnLeftArmLongPress;
            @LeftArmLongPress.canceled += instance.OnLeftArmLongPress;
            @RightShoulderLongPress.started += instance.OnRightShoulderLongPress;
            @RightShoulderLongPress.performed += instance.OnRightShoulderLongPress;
            @RightShoulderLongPress.canceled += instance.OnRightShoulderLongPress;
            @LeftShoulderLongPress.started += instance.OnLeftShoulderLongPress;
            @LeftShoulderLongPress.performed += instance.OnLeftShoulderLongPress;
            @LeftShoulderLongPress.canceled += instance.OnLeftShoulderLongPress;
            @CameraReset.started += instance.OnCameraReset;
            @CameraReset.performed += instance.OnCameraReset;
            @CameraReset.canceled += instance.OnCameraReset;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Rise.started += instance.OnRise;
            @Rise.performed += instance.OnRise;
            @Rise.canceled += instance.OnRise;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Awake.started += instance.OnAwake;
            @Awake.performed += instance.OnAwake;
            @Awake.canceled += instance.OnAwake;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @RightArmPress.started -= instance.OnRightArmPress;
            @RightArmPress.performed -= instance.OnRightArmPress;
            @RightArmPress.canceled -= instance.OnRightArmPress;
            @LeftArmPress.started -= instance.OnLeftArmPress;
            @LeftArmPress.performed -= instance.OnLeftArmPress;
            @LeftArmPress.canceled -= instance.OnLeftArmPress;
            @RightShoulderPress.started -= instance.OnRightShoulderPress;
            @RightShoulderPress.performed -= instance.OnRightShoulderPress;
            @RightShoulderPress.canceled -= instance.OnRightShoulderPress;
            @LeftShoulderPress.started -= instance.OnLeftShoulderPress;
            @LeftShoulderPress.performed -= instance.OnLeftShoulderPress;
            @LeftShoulderPress.canceled -= instance.OnLeftShoulderPress;
            @RightArmLongPress.started -= instance.OnRightArmLongPress;
            @RightArmLongPress.performed -= instance.OnRightArmLongPress;
            @RightArmLongPress.canceled -= instance.OnRightArmLongPress;
            @LeftArmLongPress.started -= instance.OnLeftArmLongPress;
            @LeftArmLongPress.performed -= instance.OnLeftArmLongPress;
            @LeftArmLongPress.canceled -= instance.OnLeftArmLongPress;
            @RightShoulderLongPress.started -= instance.OnRightShoulderLongPress;
            @RightShoulderLongPress.performed -= instance.OnRightShoulderLongPress;
            @RightShoulderLongPress.canceled -= instance.OnRightShoulderLongPress;
            @LeftShoulderLongPress.started -= instance.OnLeftShoulderLongPress;
            @LeftShoulderLongPress.performed -= instance.OnLeftShoulderLongPress;
            @LeftShoulderLongPress.canceled -= instance.OnLeftShoulderLongPress;
            @CameraReset.started -= instance.OnCameraReset;
            @CameraReset.performed -= instance.OnCameraReset;
            @CameraReset.canceled -= instance.OnCameraReset;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Rise.started -= instance.OnRise;
            @Rise.performed -= instance.OnRise;
            @Rise.canceled -= instance.OnRise;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Awake.started -= instance.OnAwake;
            @Awake.performed -= instance.OnAwake;
            @Awake.canceled -= instance.OnAwake;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Mission
    private readonly InputActionMap m_Mission;
    private List<IMissionActions> m_MissionActionsCallbackInterfaces = new List<IMissionActions>();
    private readonly InputAction m_Mission_BackToBase;
    private readonly InputAction m_Mission_Menu;
    public struct MissionActions
    {
        private @InputControls m_Wrapper;
        public MissionActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackToBase => m_Wrapper.m_Mission_BackToBase;
        public InputAction @Menu => m_Wrapper.m_Mission_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Mission; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MissionActions set) { return set.Get(); }
        public void AddCallbacks(IMissionActions instance)
        {
            if (instance == null || m_Wrapper.m_MissionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MissionActionsCallbackInterfaces.Add(instance);
            @BackToBase.started += instance.OnBackToBase;
            @BackToBase.performed += instance.OnBackToBase;
            @BackToBase.canceled += instance.OnBackToBase;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IMissionActions instance)
        {
            @BackToBase.started -= instance.OnBackToBase;
            @BackToBase.performed -= instance.OnBackToBase;
            @BackToBase.canceled -= instance.OnBackToBase;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IMissionActions instance)
        {
            if (m_Wrapper.m_MissionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMissionActions instance)
        {
            foreach (var item in m_Wrapper.m_MissionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MissionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MissionActions @Mission => new MissionActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_UpArrow;
    private readonly InputAction m_UI_DownArrow;
    private readonly InputAction m_UI_LeftArrow;
    private readonly InputAction m_UI_RightArrow;
    private readonly InputAction m_UI_Confirm;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_OpenStatus;
    public struct UIActions
    {
        private @InputControls m_Wrapper;
        public UIActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpArrow => m_Wrapper.m_UI_UpArrow;
        public InputAction @DownArrow => m_Wrapper.m_UI_DownArrow;
        public InputAction @LeftArrow => m_Wrapper.m_UI_LeftArrow;
        public InputAction @RightArrow => m_Wrapper.m_UI_RightArrow;
        public InputAction @Confirm => m_Wrapper.m_UI_Confirm;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @OpenStatus => m_Wrapper.m_UI_OpenStatus;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @UpArrow.started += instance.OnUpArrow;
            @UpArrow.performed += instance.OnUpArrow;
            @UpArrow.canceled += instance.OnUpArrow;
            @DownArrow.started += instance.OnDownArrow;
            @DownArrow.performed += instance.OnDownArrow;
            @DownArrow.canceled += instance.OnDownArrow;
            @LeftArrow.started += instance.OnLeftArrow;
            @LeftArrow.performed += instance.OnLeftArrow;
            @LeftArrow.canceled += instance.OnLeftArrow;
            @RightArrow.started += instance.OnRightArrow;
            @RightArrow.performed += instance.OnRightArrow;
            @RightArrow.canceled += instance.OnRightArrow;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @OpenStatus.started += instance.OnOpenStatus;
            @OpenStatus.performed += instance.OnOpenStatus;
            @OpenStatus.canceled += instance.OnOpenStatus;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @UpArrow.started -= instance.OnUpArrow;
            @UpArrow.performed -= instance.OnUpArrow;
            @UpArrow.canceled -= instance.OnUpArrow;
            @DownArrow.started -= instance.OnDownArrow;
            @DownArrow.performed -= instance.OnDownArrow;
            @DownArrow.canceled -= instance.OnDownArrow;
            @LeftArrow.started -= instance.OnLeftArrow;
            @LeftArrow.performed -= instance.OnLeftArrow;
            @LeftArrow.canceled -= instance.OnLeftArrow;
            @RightArrow.started -= instance.OnRightArrow;
            @RightArrow.performed -= instance.OnRightArrow;
            @RightArrow.canceled -= instance.OnRightArrow;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @OpenStatus.started -= instance.OnOpenStatus;
            @OpenStatus.performed -= instance.OnOpenStatus;
            @OpenStatus.canceled -= instance.OnOpenStatus;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyBoardSchemeSchemeIndex = -1;
    public InputControlScheme KeyBoardSchemeScheme
    {
        get
        {
            if (m_KeyBoardSchemeSchemeIndex == -1) m_KeyBoardSchemeSchemeIndex = asset.FindControlSchemeIndex("KeyBoardScheme");
            return asset.controlSchemes[m_KeyBoardSchemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRightArmPress(InputAction.CallbackContext context);
        void OnLeftArmPress(InputAction.CallbackContext context);
        void OnRightShoulderPress(InputAction.CallbackContext context);
        void OnLeftShoulderPress(InputAction.CallbackContext context);
        void OnRightArmLongPress(InputAction.CallbackContext context);
        void OnLeftArmLongPress(InputAction.CallbackContext context);
        void OnRightShoulderLongPress(InputAction.CallbackContext context);
        void OnLeftShoulderLongPress(InputAction.CallbackContext context);
        void OnCameraReset(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRise(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAwake(InputAction.CallbackContext context);
    }
    public interface IMissionActions
    {
        void OnBackToBase(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnUpArrow(InputAction.CallbackContext context);
        void OnDownArrow(InputAction.CallbackContext context);
        void OnLeftArrow(InputAction.CallbackContext context);
        void OnRightArrow(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnOpenStatus(InputAction.CallbackContext context);
    }
}
